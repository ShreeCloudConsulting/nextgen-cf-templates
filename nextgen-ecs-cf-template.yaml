AWSTemplateFormatVersion: "2010-09-09"
Description: "This template is to deploy ECS cluster, service, task definition along with loadbalancer for nextgen"

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: name of environment
  Subnet1:
    Type: String
    Default: 
    Description: First Subnet ID   
  Subnet2:
    Type: String
    Default:
    Description: Second Subnet ID  
  Subnet3:
    Type: String
    Default:
    Description: Third Subnet ID
  VPC:
    Type: String
    Default:
    Description: Staging VPC ID      

Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Environment}-loadbalancer-sg"
      GroupDescription: Access to the public facing load balancer
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
      VpcId: !Ref 'VPC'      
  LearningLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
        Name: !Sub "${Environment}-learningALB"
        Scheme: "internet-facing"
        Type: "application"
        Subnets:
          - !Sub "${Subnet1}"
          - !Sub "${Subnet2}"
          - !Sub "${Subnet3}"
        SecurityGroups: [!Ref 'LoadBalancerSG']
        IpAddressType: "ipv4"
        LoadBalancerAttributes: 
          - 
            Key: "access_logs.s3.enabled"
            Value: "false"
          - 
            Key: "idle_timeout.timeout_seconds"
            Value: "60"
          - 
            Key: "deletion_protection.enabled"
            Value: "false"
          - 
            Key: "routing.http2.enabled"
            Value: "true"
          - 
            Key: "routing.http.drop_invalid_header_fields.enabled"
            Value: "false"
          - 
            Key: "routing.http.xff_client_port.enabled"
            Value: "false"
          - 
            Key: "routing.http.preserve_host_header.enabled"
            Value: "false"
          - 
            Key: "routing.http.xff_header_processing.mode"
            Value: "append"
          - 
            Key: "routing.http.desync_mitigation_mode"
            Value: "defensive"
          - 
            Key: "waf.fail_open.enabled"
            Value: "false"
          - 
            Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
            Value: "false"
  GatewayLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
        Name: !Sub "${Environment}-gatewayALB"
        Scheme: "internet-facing"
        Type: "application"
        Subnets: 
          - !Sub "${Subnet1}"
          - !Sub "${Subnet2}"
          - !Sub "${Subnet3}"
        SecurityGroups: [!Ref 'LoadBalancerSG']
        IpAddressType: "ipv4"
        LoadBalancerAttributes: 
          - 
            Key: "access_logs.s3.enabled"
            Value: "false"
          - 
            Key: "idle_timeout.timeout_seconds"
            Value: "60"
          - 
            Key: "deletion_protection.enabled"
            Value: "false"
          - 
            Key: "routing.http2.enabled"
            Value: "true"
          - 
            Key: "routing.http.drop_invalid_header_fields.enabled"
            Value: "false"
          - 
            Key: "routing.http.xff_client_port.enabled"
            Value: "false"
          - 
            Key: "routing.http.preserve_host_header.enabled"
            Value: "false"
          - 
            Key: "routing.http.xff_header_processing.mode"
            Value: "append"
          - 
            Key: "routing.http.desync_mitigation_mode"
            Value: "defensive"
          - 
            Key: "waf.fail_open.enabled"
            Value: "false"
          - 
            Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
            Value: "false"  
  DummyTargetGroupLearning:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'Environment', 'drop-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
  LearningLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: LearningLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupLearning'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LearningLoadBalancer'
      Port: 80
      Protocol: HTTP    
  DummyTargetGroupGateway:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'Environment', 'drop-2']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
  GatewayLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: GatewayLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupGateway'
          Type: 'forward'
      LoadBalancerArn: !Ref 'GatewayLoadBalancer'
      Port: 80
      Protocol: HTTP                 

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${Environment}-nextgen"
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Environment}-fargate"
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:*'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSTaskDefinitionLearning:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions: 
        - 
          Environment: 
            - 
              Name: "APP_PORT"
              Value: "80"
            - 
              Name: "MONGODB_CONNSTRING"
              Value: !Sub "mongodb+srv://xxxxxxxx:xxxxxxx@xxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxx"
            - 
              Name: "MONGODB_PORT"
              Value: "27017"
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/learning:v0.1"
          LogConfiguration: 
              LogDriver: "awslogs"
              Options: 
                  awslogs-group: "/ecs/learning"
                  awslogs-region: !Ref AWS::Region
                  awslogs-stream-prefix: "ecs"
          MemoryReservation: 450
          Name: "learning"
          PortMappings: 
            - 
              ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      Family: "learning"
      TaskRoleArn: !Ref 'ECSTaskExecutionRole'
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      NetworkMode: "awsvpc"
      RequiresCompatibilities: 
        - "FARGATE"
      Cpu: "256"
      Memory: "512"
  ECSTaskDefinitionGateway:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
        ContainerDefinitions: 
          - 
            Environment: 
              - 
                Name: "MONGODB_CONNSTRING"
                Value: !Sub "mongodb+srv://xxxxxxxx:xxxxxxx@xxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxx"
              - 
                Name: "LEARNING_MS_HOST"
                Value: !Sub "http://${ECSCluster}.${AWS::Region}.elb.amazonaws.com"
              - 
                Name: "PORT"
                Value: "80"
              - 
                Name: "APP_PORT"
                Value: "80"
              - 
                Name: "MONGODB_PORT"
                Value: "27017"
            Essential: true
            Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gateway:v0.1"
            LogConfiguration: 
                LogDriver: "awslogs"
                Options: 
                    awslogs-group: "/ecs/gateway"
                    awslogs-region: !Ref AWS::Region
                    awslogs-stream-prefix: "ecs"
            MemoryReservation: 450
            Name: "gateway"
            PortMappings: 
              - 
                ContainerPort: 80
                HostPort: 80
                Protocol: "tcp"
        Family: "gateway"
        TaskRoleArn: !Ref 'ECSTaskExecutionRole'
        ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
        NetworkMode: "awsvpc"
        RequiresCompatibilities: 
          - "FARGATE"
        Cpu: "256"
        Memory: "512"   

  ECSServiceLearning:
    Type: "AWS::ECS::Service"
    DependsOn: LoadBalancerRuleLearning
    Properties:
        ServiceName: !Sub "${Environment}-learning"
        Cluster: !GetAtt ECSCluster.Arn
        LoadBalancers: 
        - 
          TargetGroupArn: !Ref 'LearningTargetGroup'
          ContainerName: "learning"
          ContainerPort: 80
        DesiredCount: 1
        LaunchType: "FARGATE"
        PlatformVersion: "LATEST"
        TaskDefinition: !Ref ECSTaskDefinitionLearning
        DeploymentConfiguration: 
          MaximumPercent: 200
          MinimumHealthyPercent: 100
        NetworkConfiguration: 
            AwsvpcConfiguration: 
                AssignPublicIp: "ENABLED"
                SecurityGroups: !Ref 'FargateContainerSecurityGroup'
                Subnets: 
                  - !Sub "${Subnet1}"
                  - !Sub "${Subnet2}"
                  - !Sub "${Subnet3}"
        HealthCheckGracePeriodSeconds: 0
        SchedulingStrategy: "REPLICA"

  LearningTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub "${Environment}-learning"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  ElasticLoadBalancingListenerLearning:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: LearningLoadBalancer
    Properties:
        LoadBalancerArn: !Ref 'LearningLoadBalancer'
        Port: 80
        Protocol: "HTTP"
        DefaultActions: 
          - 
            Order: 1
            TargetGroupArn: !Ref 'DummyTargetGroupLearning'
            Type: "forward"   

  LoadBalancerRuleLearning:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'LearningTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['/']
      ListenerArn: !Ref LearningLoadBalancerListener
      Priority: 3          

  ECSServiceGateway:
    Type: "AWS::ECS::Service"
    DependsOn: LoadBalancerRuleGateway
    Properties:
        ServiceName: !Sub "${Environment}-gateway"
        Cluster: !GetAtt ECSCluster.Arn
        LoadBalancers: 
        - 
          TargetGroupArn: !Ref GatewayTargetGroup
          ContainerName: "gateway"
          ContainerPort: 80
        DesiredCount: 1
        LaunchType: "FARGATE"
        PlatformVersion: "LATEST"
        TaskDefinition: !Ref ECSTaskDefinitionGateway
        DeploymentConfiguration: 
          MaximumPercent: 200
          MinimumHealthyPercent: 100
        NetworkConfiguration: 
          AwsvpcConfiguration: 
              AssignPublicIp: "ENABLED"
              SecurityGroups: !Ref 'FargateContainerSecurityGroup'
              Subnets: 
                - !Sub "${Subnet1}"
                - !Sub "${Subnet2}"
                - !Sub "${Subnet3}"
        HealthCheckGracePeriodSeconds: 0
        SchedulingStrategy: "REPLICA"

  GatewayTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub "${Environment}-gateway"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2   
      VpcId: !Ref 'VPC' 

  ElasticLoadBalancingListenerGateway:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: GatewayLoadBalancer
    Properties:
        LoadBalancerArn: !Ref 'GatewayLoadBalancer'
        Port: 80
        Protocol: "HTTP"
        DefaultActions: 
          - 
            Order: 1
            TargetGroupArn: !Ref 'DummyTargetGroupGateway'
            Type: "forward" 

  LoadBalancerRuleGateway:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'GatewayTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['/']
      ListenerArn: !Ref 'GatewayLoadBalancerListener'
      Priority: 3                   
